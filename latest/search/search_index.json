{
    "docs": [
        {
            "location": "/", 
            "text": "About\n\n\nBeliefUpdaters is a collection of belief updaters to be used with \nPOMDPs.jl\n models and solvers. \n\n\nIt currently provides:\n\n\n\n\na discrete belief updater\n\n\na k previous observation updater\n\n\na previous observation updater\n\n\na nothing updater\n\n\n\n\nFor particle filters see \nParticleFilters.jl\n\n\n\n\nNothing\n\n\nK Previous Observations\n\n\nDiscrete\n\n\nPrevious Observation\n\n\nAbout", 
            "title": "Home"
        }, 
        {
            "location": "/#about", 
            "text": "BeliefUpdaters is a collection of belief updaters to be used with  POMDPs.jl  models and solvers.   It currently provides:   a discrete belief updater  a k previous observation updater  a previous observation updater  a nothing updater   For particle filters see  ParticleFilters.jl   Nothing  K Previous Observations  Discrete  Previous Observation  About", 
            "title": "About"
        }, 
        {
            "location": "/discrete/", 
            "text": "Discrete\n\n\nBeliefUpdaters contains a default implementation of a discrete bayesian filter. The updater is defined with the \nDiscreteUpdater\n type. The \nDiscreteBelief\n type is provided to represent discrete beliefs for discrete states POMDPs. \n\n\nA convenience function \nuniform_belief\n is probided to create a \nDiscreteBelief\n with equal probability for each state. \n\n\n#\n\n\nBeliefUpdaters.DiscreteBelief\n \n \nType\n.\n\n\nDiscreteBelief\n\n\n\n\nA belief specified by a probability vector.\n\n\nNormalization of \nb\n is NOT enforced at all times, but the \nDiscreteBeleif(pomdp, b)\n constructor will warn, and \nupdate(...)\n always returns a belief with normalized \nb\n.\n\n\nConstructor: \n\n\nDiscreteBelief(pomdp, b::Vector{Float64}; check::Bool=true)\n\n\nFields\n\n\n- `pomdp` : the POMDP problem  \n- `state_list` : a vector of ordered states\n- `b` : the probability vector\n\n\n\n\nsource\n\n\n#\n\n\nBeliefUpdaters.DiscreteUpdater\n \n \nType\n.\n\n\nDiscreteUpdater\n\n\n\n\nAn updater type to update discrete belief using the discrete Bayesian filter.\n\n\nFields\n\n\n- pomdp \n: POMDP\n\n\n\n\nsource\n\n\n#\n\n\nBeliefUpdaters.uniform_belief\n \n \nMethod\n.\n\n\n uniform_belief(pomdp)\n\n\n\n\nReturn a DiscreteBelief with equal probability for each state.\n\n\nsource", 
            "title": "Discrete"
        }, 
        {
            "location": "/discrete/#discrete", 
            "text": "BeliefUpdaters contains a default implementation of a discrete bayesian filter. The updater is defined with the  DiscreteUpdater  type. The  DiscreteBelief  type is provided to represent discrete beliefs for discrete states POMDPs.   A convenience function  uniform_belief  is probided to create a  DiscreteBelief  with equal probability for each state.   #  BeliefUpdaters.DiscreteBelief     Type .  DiscreteBelief  A belief specified by a probability vector.  Normalization of  b  is NOT enforced at all times, but the  DiscreteBeleif(pomdp, b)  constructor will warn, and  update(...)  always returns a belief with normalized  b .  Constructor:   DiscreteBelief(pomdp, b::Vector{Float64}; check::Bool=true)  Fields  - `pomdp` : the POMDP problem  \n- `state_list` : a vector of ordered states\n- `b` : the probability vector  source  #  BeliefUpdaters.DiscreteUpdater     Type .  DiscreteUpdater  An updater type to update discrete belief using the discrete Bayesian filter.  Fields  - pomdp  : POMDP  source  #  BeliefUpdaters.uniform_belief     Method .   uniform_belief(pomdp)  Return a DiscreteBelief with equal probability for each state.  source", 
            "title": "Discrete"
        }, 
        {
            "location": "/k_previous_observations/", 
            "text": "K Previous Observations\n\n\n#\n\n\nBeliefUpdaters.KMarkovUpdater\n \n \nType\n.\n\n\nKMarkovUpdater\n\n\n\n\nUpdater that stores the k most recent observations as the belief.\n\n\nExample:\n\n\nup = KMarkovUpdater(5)\ns0 = initialstate(pomdp, rng)\ninitial_observation = generate_o(pomdp, s0, rng)\ninitial_obs_vec = fill(initial_observation, 5)\nhr = HistoryRecorder(rng=rng, max_steps=100)\nhist = simulate(hr, pomdp, policy, up, initial_obs_vec, s0)\n\n\n\n\nsource", 
            "title": "K previous observations"
        }, 
        {
            "location": "/k_previous_observations/#k-previous-observations", 
            "text": "#  BeliefUpdaters.KMarkovUpdater     Type .  KMarkovUpdater  Updater that stores the k most recent observations as the belief.  Example:  up = KMarkovUpdater(5)\ns0 = initialstate(pomdp, rng)\ninitial_observation = generate_o(pomdp, s0, rng)\ninitial_obs_vec = fill(initial_observation, 5)\nhr = HistoryRecorder(rng=rng, max_steps=100)\nhist = simulate(hr, pomdp, policy, up, initial_obs_vec, s0)  source", 
            "title": "K Previous Observations"
        }, 
        {
            "location": "/previous_observation/", 
            "text": "Previous Observation\n\n\n#\n\n\nBeliefUpdaters.PreviousObservationUpdater\n \n \nType\n.\n\n\nUpdater that stores the most recent observation as the belief, missing if none is available.\n\n\nsource", 
            "title": "Previous observation"
        }, 
        {
            "location": "/previous_observation/#previous-observation", 
            "text": "#  BeliefUpdaters.PreviousObservationUpdater     Type .  Updater that stores the most recent observation as the belief, missing if none is available.  source", 
            "title": "Previous Observation"
        }, 
        {
            "location": "/void/", 
            "text": "Nothing\n\n\n#\n\n\nBeliefUpdaters.NothingUpdater\n \n \nType\n.\n\n\nAn updater useful for when a belief is not necessary (i.e. for a random policy). \nupdate\n always returns \nnothing\n.\n\n\nsource", 
            "title": "Void"
        }, 
        {
            "location": "/void/#nothing", 
            "text": "#  BeliefUpdaters.NothingUpdater     Type .  An updater useful for when a belief is not necessary (i.e. for a random policy).  update  always returns  nothing .  source", 
            "title": "Nothing"
        }
    ]
}